WebBanking{version     = 0.1,
           url         = "https://www.banking-oberbank.at/",
           services    = {"Oberbank"},
           description = "Extension für das Kundenportal der österreichischen Oberbank"}

local connection = nil
local mainPage = nil
local logoutLink = nil
local oberbankBic = "OBKLAT2L"

function SupportsBank (protocol, bankCode)
  return protocol == ProtocolWebBanking and bankCode == "Oberbank"
end

function InitializeSession (protocol, bankCode, username, username2, password, username3)
	connection = Connection()

	print("Loading login page: " .. url)

	local loginPage = HTML(connection:get(url))
	local loginForm = loginPage:xpath("//*[@id='_loginportlet_WAR_loginportlet_']/div[1]/div[1]/article/form")
	local submitButton = loginForm:xpath("div/div/div/div[3]/input")

	loginForm:xpath("div/div/div/div[1]/input"):attr("value", username)
	loginForm:xpath("div/div/div/div[2]/div[1]/input"):attr("value", password)

	print("Logging in...")

	mainPage = HTML(connection:request(submitButton:click()))

	local welcomeDiv = mainPage:xpath("//div[@id='_welcomeportlet_WAR_configurationportlet_']")
	if welcomeDiv:length() == 0 then
		return "Login failed. First check your credentials. Then try logging in on the browser, there might be an information page you have to confirm before you can login."
	end

	logoutLink = mainPage:xpath("//div[@id='_headerportletobk_WAR_headerportlet_']/a")

	return nil
end

function ListAccounts (knownAccounts)
	local accountsUrl = url .. "group/oberbank/finanzen"

	print("Loading accounts overview page...")

	local accountsPage = HTML(connection:get(accountsUrl))
	local accountsOverview = accountsPage:xpath("//div[@id='_accountportlet_WAR_accountportlet_:accountOverview']/div[2]")

	local accounts = {}

	accountsOverview:children():each(
		function (i, accountSection)
			local newAccounts = ListAccountsFromSection(accountSection)
			for k, acc in pairs(newAccounts) do
				table.insert(accounts, acc)
			end
		end
	)

	return accounts
end

function ListAccountsFromSection(section)
	local accountsList = section:xpath("div/div/div/div[2]")
	
	local accounts = {}

	accountsList:children():each(
		function (i, accountRow)
			local account = {
				name = accountRow:xpath("div[3]/div[2]/a/div/span[3]"):text(),
				owner = accountRow:xpath("div[3]/div[2]/a/div/span[1]"):text(),
				accountNumber = tonumber(string.match(accountRow:attr("id"), "([0-9]+)")),
				bankCode = oberbankBic,
				currency = "EUR",
				iban = accountRow:xpath("div[3]/div[2]/a/div/span[2]"):text(),
				type = AccountTypeGiro
			}

			table.insert(accounts, account)
		end
	)

	return accounts
end

function RefreshAccount (account, since)
	local statementsUrl = url .. "group/oberbank/accountdetails?accountID=" .. account.accountNumber

	print("Fetching initial statements page...")

	local statementsPage = HTML(connection:get(statementsUrl))

	local dateRangeForm = statementsPage:xpath("//*[@id='subpage-header-accordion']/div[3]/div/div[2]/div/form")
	local dateFromInput = dateRangeForm:xpath("div/div/fieldset[1]/div/div[2]/div/div[1]/input[1]")
	print("Current Date: " .. dateFromInput:attr("value"))
	local dateFormSubmit = dateRangeForm:xpath("div/footer/div/span/input")
	dateFromInput:attr("value", TimestampToDateString(since))
	print("New Date: " .. dateFromInput:attr("value"))

	print("Fetching long statements page...")

	local method, url, formQuery, contentType = dateFormSubmit:click()

	-- Hack: We need some extra variables that are generated by JS trickery. This might break if the JS changes.
	local augmentedQuery = "javax.faces.partial.ajax=false&javax.faces.source=_accountdetailportlet_WAR_accountportlet_%3Aj_idt130%3Aj_idt188&javax.faces.partial.execute=%40all&javax.faces.partial.render=_accountdetailportlet_WAR_accountportlet_%3Aj_idt130%3AsearchGroup+_accountdetailportlet_WAR_accountportlet_%3Amore-content-container+_accountdetailportlet_WAR_accountportlet_%3Aaccount-content+_accountdetailportlet_WAR_accountportlet_%3Asticky-element+_accountdetailportlet_WAR_accountportlet_%3Aerrors&_accountdetailportlet_WAR_accountportlet_%3Aj_idt130%3Aj_idt188=_accountdetailportlet_WAR_accountportlet_%3Aj_idt130%3Aj_idt188&_accountdetailportlet_WAR_accountportlet_%3Aj_idt130=_accountdetailportlet_WAR_accountportlet_%3Aj_idt130&" .. formQuery

	statementsPage = HTML(connection:request(method, url, augmentedQuery, contentType))

	local statementsTable = statementsPage:xpath("//*[@id='_accountdetailportlet_WAR_accountportlet_:date-view']")
	local balanceStr = statementsPage:xpath("//*[@id='_accountdetailportlet_WAR_accountportlet_:account-header-title']/span[3]"):text():gsub("%sEUR","")
	local balance = AmountStringToNumber(balanceStr)

	print("Balance: " .. balance)

	local statements = {}

	statementsTable:children():each(
		function (i, statementBlock)
			statementBlock:xpath("div/form/div"):children():each(
				function (j, statementRow)
					local statement = GetStatementFromRow(statementRow)
					table.insert(statements, statement)
				end
			)
		end
	)

  return {balance=balance, transactions=statements}
end

function GetStatementFromRow(statementRow)
	local innerRow = statementRow:xpath("div/div[1]/div[2]")
	local statement = {
		bookingDate = DateStringToTimestamp(innerRow:xpath("div[1]/div"):text()),
		purpose = innerRow:xpath("div[3]"):text(),
		amount = AmountStringToNumber(innerRow:xpath("div[4]/span"):text():gsub("%sEUR","")),
		valueDate = DateStringToTimestamp(innerRow:xpath("div[2]"):text())
	}

	print(TimestampToDateString(statement.bookingDate) .. " -- " .. statement.amount .. " -- " .. statement.purpose)

	return statement
end

function EndSession ()
	print("Logging out...")
	connection:request(logoutLink:click())
end

function DateStringToTimestamp(dateString)
    local dayStr, monthStr, yearStr = string.match(dateString, "(%d%d).(%d%d).(%d%d%d%d)")
    return os.time({
        year = tonumber(yearStr),
        month = tonumber(monthStr),
        day = tonumber(dayStr)
    })
end

function TimestampToDateString(timestamp)
	return os.date("%d.%m.%Y", timestamp)
end

function AmountStringToNumber(amountString)
	resultStr = string.gsub(amountString, "%.", "")
	resultStr = string.gsub(resultStr, ",", ".")
	return tonumber(resultStr)
end